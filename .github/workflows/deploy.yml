name: Deploy Hugo site to Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.146.0'
          extended: true
      - name: Build
        run: hugo --minify
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Wait for previous Pages deployment to finish
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const maxAttempts = 60; // wait up to ~10 minutes
            const wait = ms => new Promise(r => setTimeout(r, ms));
            for (let i = 0; i < maxAttempts; i++) {
              try {
                const { data } = await github.request('GET /repos/{owner}/{repo}/pages/deployments', {
                  owner,
                  repo,
                  per_page: 1
                });
                if (!Array.isArray(data) || data.length === 0) {
                  core.info('No prior Pages deployments found.');
                  break;
                }
                const latest = data[0];
                const status = latest.status || latest.state || 'unknown';
                core.info(`Latest Pages deployment status: ${status}`);
                if (!['in_progress', 'pending', 'building', 'queued'].includes(status)) {
                  break; // safe to proceed
                }
                await wait(10000);
              } catch (e) {
                core.warning(`Failed to query Pages deployments: ${e.message}`);
                await wait(10000);
              }
            }
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
